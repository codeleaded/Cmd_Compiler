
namespace ptr {
    void set(void* ptr,i8 value,u64 size){
        i8* cptr = (i8*)ptr;
        i64 todo = size / 8 * 8;
        i64 rest = size - todo;
        
        i64* dst64 = (i64*)cptr;
        i64 value64 = value;
        i64 comp = value64 | value64<<8 | value64<<16 | value64<<24 | value64<<32 | value64<<40 | value64<<48 | value64<<56;
        i64 i = 0;
        for ,i<todo,i+=8 {
            *(dst64+i) = comp;
        }
        for ,i<size,i++ {
            cptr[i] = value;
        }
    }
    void cpy(void* dst,void* src,i64 size){
        i8* cdst = (i8*)dst;
        i8* csrc = (i8*)src;
        
        i64 todo = size / 8 * 8;
        i64 rest = size - todo;
        
        i64* dst64 = (i64*)dst;
        i64* src64 = (i64*)src;
        i64 i = 0;
        for ,i<todo,i+=8 {
            *(dst64+i) = (i64)*(src64+i);
        }
        for ,i<size,i++ {
            cdst[i] = (i8)csrc[i];
        }
    }
    void mov(void* dst,void* src,i64 size){
        i8* cdst = (i8*)dst;
        i8* csrc = (i8*)src;
        
        i64 todo = size / 8 * 8;
        i64 rest = size - todo;
        
        i64* dst64 = (i64*)dst;
        i64* src64 = (i64*)src;
        i64 i = 0;
        for ,i<todo,i+=8 {
            *(dst64+i) = (i64)*(src64+i);
            *(src64+i) = 0;
        }
        for ,i<size,i++ {
            cdst[i] = (i8)csrc[i];
            csrc[i] = 0;
        }
    }
    void shl(void* dst,i64 count,i64 size){
        i8* cdst = (i8*)dst;
        
        i64 todo = size / 8 * 8;
        i64 rest = size - todo;
        
        i8* src = (i8*)(dst - count);
        i64* dst64 = (i64*)src;
        i64* src64 = (i64*)dst;
        i64 i = 0;
        for ,i<todo,i+=8 {
            *(dst64+i) = (i64)*(src64+i);
        }
        for ,i<size,i++ {
            cdst[i] = (i8)src[i];
        }
    }
    void shr(void* dst,i64 count,i64 size){
        i8* cdst = (i8*)dst;
        
        i64 todo = size / 8 * 8;
        i64 rest = size - todo;
        
        i8* src = (i8*)(dst + count);
        i64* dst64 = (i64*)src;
        i64* src64 = (i64*)dst;
        i64 i = size-1;
        for ,i>todo,i-- {
            cdst[i] = (i8)src[i];
        }
        for ,i>=0,i-=8 {
            *(dst64+i) = (i64)*(src64+i);
        }
    }
}
