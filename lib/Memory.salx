import "../lib/System.salx";
import "../lib/IO.salx";
import "../lib/Pointer.salx";
import "../lib/Parser.salx";

namespace mem {
    struct Header[
        pub u32 length,
        pub u8 flags
    ];

    struct Allocator[
        void* memory,
        u64 length
    ];

    impl Allocator{
        pub void init(Allocator* self,u64 size){
            self->memory = sys::mmap(size);
            self->length = size;
            ptr::set(self->memory,0,size);

            Header* first = self->memory;
            first->length = size - 5;
        }
        pub void delete(Allocator* self){
            if self->memory != 0 {
                sys::munmap(self->memory,self->length);
            }
            self->memory = 0;
            self->length = 0;
        }
        
        pub Allocator new(){
            Allocator alloc;
            alloc.init(10000);
            return alloc;
        }
        pub Allocator make(u64 size){
            Allocator alloc;
            alloc.init(size);
            return alloc;
        }

        pub void* getMemory(Allocator* self){
            return self->memory;
        }
        pub u64 getLength(Allocator* self){
            return self->length;
        }

        pub void* alloc(Allocator* self,u64 size){
            void* ptr = null;
            Header* first = self->memory;
            
            while true {
                if first+5+size>self->memory+self->length {
                    return null;
                }elif first->flags==0 && first->length>=size {
                    u64 rem = first->length - size;
                    if rem<=5 {
                        size = first->length;
                    }
                    first->flags = 1;
                    first->length = size;
                    ptr = first + 5;

                    Header* next = ptr + size;
                    if rem>5 && next+rem<=self->memory+self->length {
                        next->length = rem - 5;
                        next->flags = 0;
                    }
                    return ptr;
                }else{
                    first = first + 5 + first->length;
                }
            }
            return ptr;
        }
        pub void free(Allocator* self,void* ptr){
            if ptr<self->memory || ptr>self->memory+self->length {
                return;
            }
            
            Header* prev = null;
            Header* first = self->memory;
            
            while true {
                if first+5+first->length > self->memory+self->length {
                    return;
                }elif ptr >= first && ptr < first+5+first->length {
                    first->flags = 0;
                    
                    Header* next = first+5+first->length;
                    if next<=self->memory+self->length {
                        if next->flags==0 {
                            first->length += 5 + next->length;
                        }
                    }

                    if prev>=self->memory {
                        if prev->flags==0 {
                            prev->length += 5 + first->length;
                        }
                    }
                    return;
                }else{
                    prev = first;
                    first = first + 5 + first->length;
                }
            }
        }
        
        pub void* realloc(Allocator* self,void* ptr,u64 size){
            if ptr<self->memory || ptr>self->memory+self->length {
                return null;
            }
            
            Header* first = self->memory;
            
            while true {
                if first+5+first->length > self->memory+self->length {
                    return null;
                }elif ptr >= first && ptr < first+5+first->length {
                    Header* next = first+5+first->length;
                    
                    if first->length>size {
                        i32 diff = first->length - size - 5;
                        if diff>0 {
                            first->length = size;
                            Header* renext = first+5+first->length;
                            renext->flags = 0;
                            renext->length = diff;
                        }
                        return ptr;
                    }elif next->flags==0 {
                        if first->length+5+next->length>size {
                            i32 diff = first->length + next->length - size;// + 5 & - 5 => 0
                            if diff>0 {
                                first->length = size;
                                Header* renext = first+5+first->length;
                                renext->flags = 0;
                                renext->length = diff;
                            }else{
                                first->length += 5 + next->length;
                            }
                            return ptr;
                        }
                    }

                    void* newptr = self->alloc(size);
                    ptr::cpy(newptr,ptr,first->length);
                    self->free(ptr);
                    return newptr;
                }else{
                    first = first + 5 + first->length;
                }
            }
            return ptr;
        }
        pub void* calloc(Allocator* self,u64 count,u64 elementsize){
            void* ptr = self->alloc(count * elementsize);
            ptr::set(ptr,0,count * elementsize);
            return ptr;
        }

        pub void print(Allocator* self){
            io::print("------------------ Allocator -----------------\n");
            i8 cstr[48];
            ptr::set(cstr,32,45);
            ptr::cpy(cstr,"| Memory:",9);
            math::uint::get(cstr+10,self->getMemory());
            ptr::cpy(cstr+45,"\n",2);
            io::print(cstr);

            ptr::set(cstr,32,45);
            ptr::cpy(cstr,"| Length:",9);
            math::uint::get(cstr+10,self->getLength());
            ptr::cpy(cstr+45,"\n",2);
            io::print(cstr);

            Header* first = self->memory;
            while first>=self->memory && first<self->memory+self->length {
                ptr::set(cstr,32,45);
                ptr::cpy(cstr,"| Block:",8);
                math::uint::get(cstr+9,first);
                math::uint::get(cstr+28,first->length);
                math::uint::get(cstr+35,first->flags);
                ptr::cpy(cstr+45,"|",1);
                ptr::cpy(cstr+46,"\n",2);
                io::print(cstr);
            
                first = first + 5 + first->length;
            }

            io::print("----------------------------------------------\n");
        }
    }
}
