struct Animal [
    i32 a,
    i32 b
];

struct Human [
    i32 a,
    i32 b,
    Animal c
];

impl Human {
    Human new(){
        Human h;
        h.a = 1;
        h.b = 2;
        h.c.a = 3;
        h.c.b = 4;
        return h;
    }
    void sayHello(Human* self){
        print("Hello from Human\n",17);
    }
    Animal getA(Human* self){
        self->sayHello();
        return (*self).c;
    }
}

i8* buffer = "             ";
input(buffer,12);
*(buffer + 0) = 48;
buffer[1] = 49;
print(buffer,12);
bool a = 1 == 2;
return buffer[2];

Human h = Human::new();
h.sayHello();
Animal a = h.getA();
print("Hello World\n",12);
return a.a + a.b;

for i64 i = 0, i<3 , i = i + 1 {
    i64 a = 0;
    i64 b = 1;
    i64 j = 0;
    while j<5 {
        if a > b {
            io::print("Greater\n",8);
        }
        elif a < b {
            io::print("Less\n",5);
        }
        else{
            io::print("Equal\n",6);
        }
        j = j + 1;
        b = b + 1;
    }
}

i64 a = 69;
i64* pa = &a;
i64** ppa = &pa;
i64*** pppa = &ppa;
i64**** ppppa = &pppa;
return ****ppppa;


i64 func1(i64 a,i64 b){
    return a + b;
}
i64 func2(i64(i64,i64)* a,i64(i64,i64)* b){
    return a(1,2) + b(3,4);
}

i64(i64(i64,i64)*,i64(i64,i64)*)* f = func2;
i64 a = f(func1,func1);

i64 a = 1;
i64 b = 2;
a = b;
a += b + 1;
a++;
a--;
i64 c = a % 2;


struct Animal [
    pub i32 a,
    pub i32 b
];

struct Human [
    pub i32 a,
    pub i32 b,
    pub Animal c
];

impl Human {
    Human new(){
        Human h;
        h.a = 1;
        h.b = 2;
        h.c.a = 3;
        h.c.b = 4;
        return h;
    }
    pub void sayHello(Human* self){
        io::print("Hello from Human\n",17);
    }
    pub Animal getA(Human* self){
        self->sayHello();
        return self->c;
    }
}

Human h = Human::new();
h.sayHello();
Animal a = h.getA();
return a.a + a.b;

f64 a = 1.5;
f64 b = 3.0;
f64 c = a + b;
return (i64)(a + b);